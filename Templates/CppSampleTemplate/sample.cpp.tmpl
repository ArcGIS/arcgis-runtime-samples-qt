// [WriteFile Name=%{SampleName}, Category=%{SampleCategory}]
// [Legal]
// Copyright %{CurrentYear} Esri.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// [Legal]

#ifdef PCH_BUILD
#include "pch.hpp"
#endif // PCH_BUILD

#include "%{SampleName}.h"

@if %{UseFeatureLayer}
#include "FeatureLayer.h"
#include "ServiceFeatureTable.h"
@endif
@if %{ThreeDSample}
#include "ArcGISTiledElevationSource.h"
#include "ElevationSourceListModel.h"
#include "MapTypes.h"
#include "Scene.h"
#include "SceneQuickView.h"
#include "Surface.h"
@else
#include "Map.h"
#include "MapQuickView.h"
#include "MapTypes.h"
@endif

using namespace Esri::ArcGISRuntime;

%{SampleName}::%{SampleName}(QObject* parent /* = nullptr */):
  QObject(parent),
@if %{UseAPIKey}
  @if %{ThreeDSample}
    m_scene(new Scene(BasemapStyle::ArcGISImagery, this))
  @else
    m_map(new Map(BasemapStyle::ArcGISTopographic, this))
  @endif
@else
  @if %{ThreeDSample}
    m_scene(new Scene(Basemap::imagery(this), this))
  @else
    m_map(new Map(Basemap::topographicVector(this), this))
  @endif
@endif
{
@if %{ThreeDSample}
  // create a new elevation source from Terrain3D REST service
  ArcGISTiledElevationSource* elevationSource = new ArcGISTiledElevationSource(
    QUrl("https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer"), this);

  // add the elevation source to the scene to display elevation
  m_scene->baseSurface()->elevationSources()->append(elevationSource);
@endif

@if %{UseFeatureLayer}
  // create the feature table
  ServiceFeatureTable* featureTable = new ServiceFeatureTable(QUrl("%{FeatureLayerURL}"), this);
  // create the feature layer using the feature table
  m_featureLayer = new FeatureLayer(featureTable, this);

@if %{ThreeDSample}
   // add the feature layer to the scene
   m_scene->operationalLayers()->append(m_featureLayer);
@else
   // add the feature layer to the map
   m_map->operationalLayers()->append(m_featureLayer);
@endif
@endif
}

%{SampleName}::~%{SampleName}() = default;

void %{SampleName}::init()
{
@if %{ThreeDSample}
  // Register classes for QML
  qmlRegisterType<SceneQuickView>("Esri.Samples", 1, 0, "SceneView");
@else
  // Register the map view for QML
  qmlRegisterType<MapQuickView>("Esri.Samples", 1, 0, "MapView");
@endif
  qmlRegisterType<%{SampleName}>("Esri.Samples", 1, 0, "%{SampleName}Sample");
}

@if %{ThreeDSample}
SceneQuickView* %{SampleName}::sceneView() const
{
  return m_sceneView;
}

// Set the view (created in QML)
void %{SampleName}::setSceneView(SceneQuickView* sceneView)
{
  if (!sceneView || sceneView == m_sceneView)
    return;

  m_sceneView = sceneView;
  m_sceneView->setArcGISScene(m_scene);

  emit sceneViewChanged();
}

@else
MapQuickView* %{SampleName}::mapView() const
{
  return m_mapView;
}

// Set the view (created in QML)
void %{SampleName}::setMapView(MapQuickView* mapView)
{
  if (!mapView || mapView == m_mapView)
    return;

  m_mapView = mapView;
  m_mapView->setMap(m_map);

  emit mapViewChanged();
}
@endif
