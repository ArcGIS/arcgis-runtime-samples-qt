// [WriteFile Name=%{SampleName}, Category=%{SampleCategory}]
// [Legal]
// Copyright %{CurrentYear} Esri.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// [Legal]

#include "%{SampleName}.h"

@if %{UseFeatureLayer}
#include "FeatureLayer.h"
#include "ServiceFeatureTable.h"
@endif
@if %{ThreeDSample}
#include "ArcGISTiledElevationSource.h"
#include "Scene.h"
#include "SceneGraphicsView.h"
@else
#include "Map.h"
#include "MapGraphicsView.h"
@endif

#include <QVBoxLayout>

using namespace Esri::ArcGISRuntime;

%{SampleName}::%{SampleName}(QWidget* parent /* = nullptr */):
  QWidget(parent)
{
@if %{UseAPIKey}
@if %{ThreeDSample}
  // Create a scene using the Imagery basemap
  m_scene = new Scene(BasemapStyle::ArcGISImagery, this);

  // create an elevation source
  ArcGISTiledElevationSource* elevationSource = new ArcGISTiledElevationSource(
      QUrl("http://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer"), this);
  m_scene->baseSurface()->elevationSources()->append(elevationSource);

  // Create a scene view, and pass in the scene
  m_sceneView = new SceneGraphicsView(m_scene, this);

@else
  // Create a map using the topo basemap
  m_map = new Map(BasemapStyle::ArcGISTopographic, this);

@if %{UseFeatureLayer}
  // create the feature table
  ServiceFeatureTable* featureTable = new ServiceFeatureTable(QUrl("%{FeatureLayerURL}"), this);
  // create the feature layer using the feature table
  m_featureLayer = new FeatureLayer(featureTable, this);

  // add the feature layer to the map
  m_map->operationalLayers()->append(m_featureLayer);
@endif
  // Create a map view, and pass in the map
  m_mapView = new MapGraphicsView(m_map, this);

@endif
@else
  @if %{ThreeDSample}
    // Create a scene using the Imagery basemap
    m_scene = new Scene(Basemap::imagery(this), this);

    // create an elevation source
    ArcGISTiledElevationSource* elevationSource = new ArcGISTiledElevationSource(
        QUrl("http://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer"), this);
    m_scene->baseSurface()->elevationSources()->append(elevationSource);

    // Create a scene view, and pass in the scene
    m_sceneView = new SceneGraphicsView(m_scene, this);

  @else
    // Create a map using the imagery basemap
    m_map = new Map(Basemap::imagery(this), this);

  @if %{UseFeatureLayer}
    // create the feature table
    ServiceFeatureTable* featureTable = new ServiceFeatureTable(QUrl("%{FeatureLayerURL}"), this);
    // create the feature layer using the feature table
    m_featureLayer = new FeatureLayer(featureTable, this);

    // add the feature layer to the map
    m_map->operationalLayers()->append(m_featureLayer);
  @endif
    // Create a map view, and pass in the map
    m_mapView = new MapGraphicsView(m_map, this);

  @endif
@endif
  createUi();
}

%{SampleName}::~%{SampleName}() = default;

void %{SampleName}::createUi()
{
  QVBoxLayout* vBoxLayout = new QVBoxLayout(this);
@if %{ThreeDSample}
  vBoxLayout->addWidget(m_sceneView);
@else
    vBoxLayout->addWidget(m_mapView);
@endif
  setLayout(vBoxLayout);
}
